class EffortProgressRow
  include PersonalInfo

  attr_reader :over_under_due
  delegate :id, :first_name, :last_name, :gender, :bib_number, :age, :start_time, to: :effort

  # This object requires an effort object that includes
  # a last_reported_split_time and a next_expected_split_time
  # such as is generated by the EventProgressDisplay class

  def initialize(effort, split_name_hash, bitkey_hashes)
    @effort = effort
    @split_name_hash = split_name_hash
    @bitkey_hashes = bitkey_hashes
    @over_under_due = (Time.now - start_time) - next_expected_split_time.time_from_start
  end

  def due_next_split_name
    split_name_hash[next_expected_split_time.split_id]
  end

  def due_next_when
    effort.start_time + next_expected_split_time.time_from_start
  end

  def last_reported_split_name
    split_name_hash[last_reported_split_time.split_id]
  end

  def last_reported_when
    effort.start_time + last_reported_split_time.time_from_start
  end

  private

  attr_reader :effort, :split_name_hash, :bitkey_hashes

  def last_reported_split_time
    effort.last_reported_split_time
  end

  def next_expected_split_time
    effort.next_expected_split_time
  end

end